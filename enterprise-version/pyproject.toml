[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "trading-bot"
version = "0.1.0"
description = "A Python-based algorithmic trading bot for strategy development and backtesting"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Pablo Gonzalez de la Rosa", email = "your_email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "backtrader>=1.9.78",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "yfinance>=0.2.0",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.0.0",
    "fastapi>=0.100.0",
    "requests>=2.31.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "ta-lib>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
data = [
    "alpha-vantage>=2.3.0",
    "ccxt>=4.0.0",
    "polygon-api-client>=1.0.0",
]
visualization = [
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "dash>=2.14.0",
    "seaborn>=0.12.0",
]
live-trading = [
    "ib-insync>=0.9.0",
    "alpaca-trade-api>=3.0.0",
]
all = [
    "trading-bot[dev,data,visualization,live-trading]"
]

[project.urls]
Homepage = "https://github.com/yourusername/trading-bot"
Repository = "https://github.com/yourusername/trading-bot"
Documentation = "https://github.com/yourusername/trading-bot/docs"
"Bug Tracker" = "https://github.com/yourusername/trading-bot/issues"

[project.scripts]
trading-bot = "trading_bot.cli:main"
backtest = "trading_bot.backtesting.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["trading_bot*"]
exclude = ["tests*", "docs*"]

# =============================================================================
# RUFF CONFIGURATION
# =============================================================================

[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4

exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
    ".ipynb_checkpoints", ".mypy_cache", ".nox", ".pants.d",
    ".pyenv", ".pytest_cache", ".pytype", ".ruff_cache",
    ".svn", ".tox", ".venv", ".vscode", "__pypackages__",
    "_build", "buck-out", "build", "dist", "node_modules",
    "site-packages", "venv", "logs", "data/cache"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "PL",  # PyLint
    "S",   # bandit (security)
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "S101",    # Use of assert (common in trading algorithms)
    "PLR0913", # Too many arguments (common in trading functions)
    "PLR2004", # Magic value in comparison (common for financial thresholds)
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["S101", "PLR2004"]  # Allow assert and magic values in tests
"trading_bot/strategies/*.py" = ["PLR0913", "PLR2004"]  # Allow many args and magic values in strategies

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 72

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["trading_bot"]
known-third-party = ["backtrader", "pandas", "numpy", "yfinance"]

# =============================================================================
# MYPY CONFIGURATION
# =============================================================================

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "backtrader.*",
    "yfinance.*",
    "ta.*",
    "ccxt.*",
    "alpha_vantage.*",
]
ignore_missing_imports = true

# =============================================================================
# PYTEST CONFIGURATION
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=trading_bot",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "backtest: marks tests that involve backtesting",
    "live_data: marks tests that require live market data",
    "risk: marks tests related to risk management",
]

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================

[tool.coverage.run]
source = ["trading_bot"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]